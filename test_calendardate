import unittest
from unittest import TestCase
import datetime
from datetime import date, datetime

import CalendarDate


"""Unittests to check the various functions in CalendarDate()"""
class TestCalendarDate(TestCase):

    """check_date group of tests - checks todays date, future date, 
    past date limit(i.e. 1995-06-16), past limit exceeded, in range, 
    impossible date, and incorrect data."""
    def test_check_date_today(self):
        example_date = '2022-11-02'
        date_test = CalendarDate.check_date(example_date)
        self.assertTrue(date_test)

    
    def test_check_date_future(self):
        example_date = '2023-11-02'
        date_test = CalendarDate.check_date(example_date)
        self.assertFalse(date_test)


    def test_check_date_past_limit(self):
        example_date = '1995-06-16'
        date_test = CalendarDate.check_date(example_date)
        self.assertTrue(date_test)


    def test_check_date_past_limit_exceeded(self):
        example_date = '1990-06-16'
        date_test = CalendarDate.check_date(example_date)
        self.assertFalse(date_test)


    def test_check_date_in_range(self):
        example_date = '2000-01-01'
        date_test = CalendarDate.check_date(example_date)
        self.assertTrue(date_test)


    def test_check_date_impossible(self):
        example_date = '2022-99-99'
        date_test = CalendarDate.check_date(example_date)
        self.assertFalse(date_test)


    def test_check_date_empty_str(self):
        example_date = ''
        date_test = CalendarDate.check_date(example_date)
        self.assertFalse(date_test)


    def test_check_date_wrong_format(self):
        example_date = '20000101'
        date_test = CalendarDate.check_date(example_date)
        self.assertFalse(date_test)


    def test_check_date_emoji(self):
        example_date = 'ğŸ¤”'
        date_test = CalendarDate.check_date(example_date)
        self.assertFalse(date_test)


    def test_check_date_wrong_str(self):
        example_date = 'shenanigans!'
        date_test = CalendarDate.check_date(example_date)
        self.assertFalse(date_test)


    def test_check_date_a_space(self):
        example_date = ' '
        date_test = CalendarDate.check_date(example_date)
        self.assertFalse(date_test)

    

    """This group tests the get_date_parts() to see if it will 
    work with correct, and incorrect data"""
    def test_get_date_parts(self):
        test_date = '2000-01-01'
        test_response = CalendarDate.get_date_parts(test_date)
        expected_date = ('2000', '01', '01')
        self.assertEqual(expected_date, test_response)
    

    def test_get_date_parts_wrong_format(self):
        test_date_incorrect = '20000101'
        test_response = CalendarDate.get_date_parts(test_date_incorrect)
        expected_date = ('1995', '06', '16')
        self.assertEqual(expected_date, test_response)
    

    def test_get_date_parts_empty_str(self):
        test_date_incorrect = ''
        test_response = CalendarDate.get_date_parts(test_date_incorrect)
        expected_date = ('1995', '06', '16')
        self.assertEqual(expected_date, test_response)


    def test_get_date_parts_emoji(self):
        test_date_incorrect = '20000101'
        test_response = CalendarDate.get_date_parts(test_date_incorrect)
        expected_date = ('1995', '06', '16')
        self.assertEqual(expected_date, test_response)

    
    def test_get_date_parts_wrong_str(self):
        test_date_incorrect = 'batmansbaseballbatbat'
        test_response = CalendarDate.get_date_parts(test_date_incorrect)
        expected_date = ('1995', '06', '16')
        self.assertEqual(expected_date, test_response)

    
    def test_get_date_parts_a_space(self):
        test_date_incorrect = ' '
        test_response = CalendarDate.get_date_parts(test_date_incorrect)
        expected_date = ('1995', '06', '16')
        self.assertEqual(expected_date, test_response)


    """This group tests the get_date_month_day_str() to see if it will 
    work with correct, and incorrect data"""
    def test_get_date_month_day_str(self):
        test_date = '2005-06-04'
        test_response = CalendarDate.get_date_month_day_str(test_date)
        expected_response = 'June 04'
        self.assertEqual(expected_response, test_response)

    
    def test_get_date_month_day_str_wrong_format(self):
        test_date = '20050604'
        test_response = CalendarDate.get_date_month_day_str(test_date)
        expected_response = 'June 16'
        self.assertEqual(expected_response, test_response)


    def test_get_date_month_day_str_empty_str(self):
        test_date = ''
        test_response = CalendarDate.get_date_month_day_str(test_date)
        expected_response = 'June 16'
        self.assertEqual(expected_response, test_response)


    def test_get_date_month_day_str_emoji(self):
        test_date = 'ğŸ¤”'
        test_response = CalendarDate.get_date_month_day_str(test_date)
        expected_response = 'June 16'
        self.assertEqual(expected_response, test_response)


    def test_get_date_month_day_str_wrong_str(self):
        test_date = 'Godzilla'
        test_response = CalendarDate.get_date_month_day_str(test_date)
        expected_response = 'June 16'
        self.assertEqual(expected_response, test_response)

    def test_get_date_month_day_str_a_space(self):
        test_date = ' '
        test_response = CalendarDate.get_date_month_day_str(test_date)
        expected_response = 'June 16'
        self.assertEqual(expected_response, test_response)


    """This group tests the get_date_for_display() to see if it will 
    work with correct, and incorrect data"""
    def test_get_date_for_display(self):
        test_date = '2005-06-04'
        test_response = CalendarDate.get_date_for_display(test_date)
        expected_response = 'June 04 2005'
        self.assertEqual(expected_response, test_response)


    def test_get_date_for_display_wrong_format(self):
        test_date = '20050604'
        test_response = CalendarDate.get_date_for_display(test_date)
        expected_response = 'June 16 1995'
        self.assertEqual(expected_response, test_response)

    
    def test_get_date_for_display_empty_str(self):
        test_date = ''
        test_response = CalendarDate.get_date_for_display(test_date)
        expected_response = 'June 16 1995'
        self.assertEqual(expected_response, test_response)


    def test_get_date_for_display_emoji(self):
        test_date = 'ğŸ¤”'
        test_response = CalendarDate.get_date_for_display(test_date)
        expected_response = 'June 16 1995'
        self.assertEqual(expected_response, test_response)
    

    def test_get_date_for_display_wrong_str(self):
        test_date = 'Wednesdaymydudes'
        test_response = CalendarDate.get_date_for_display(test_date)
        expected_response = 'June 16 1995'
        self.assertEqual(expected_response, test_response)

    
    def test_get_date_for_display_a_space(self):
        test_date = ' '
        test_response = CalendarDate.get_date_for_display(test_date)
        expected_response = 'June 16 1995'
        self.assertEqual(expected_response, test_response)
    



if __name__ == '__main__':
    unittest.main()